{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,mCACI,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAe,MAMf,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBU,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,e,+BCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEvB,ECHwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACDf,KAAMkB,EACNL,SAAS,SAI1B,CAAEpB,IAGEqB,EDlB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEA,sBAAKgB,UAAU,YAAf,UAEMI,GAAW,mBAAGJ,UAAU,mCAAb,qBAGTH,EAAOJ,KAAK,SAAAC,GACR,OAAO,cAAC,EAAD,eAEUA,GADAA,EAAIC,cEfhCgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAE9B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEGA,SAAUA,GADLA,YCZlB6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCEdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAQ1BX,M","file":"static/js/main.21aa77e6.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setinputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if ( inputValue.trim().length > 2 ){\n            setCategories( cats => [ inputValue, ...cats] );\n            setinputValue( '' );\n        }\n    }\n\n    return (\n        <>\n            <form onSubmit={ handleSubmit }>\n                <input \n                    type=\"text\"\n                    value={ inputValue }\n                    onChange={ handleInputChange }\n                />\n            </form>\n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=JUu87bd8EcaGuvK0IeVdyL5ECg6HLAzp`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { title, url } ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n    \n    const { data:images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n\n            <div className=\"card-grid\">\n\n                { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n                { \n                    images.map( img => {\n                        return <GifGridItem \n                                    key={img.id}\n                                    { ...img } \n                                />\n                    }) \n                }\n            \n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n\n                setState({\n                        data: imgs,\n                        loading: false\n                });               \n            })\n\n    }, [ category ]);\n\n\n    return state;       // { data:[], loading: true }\n\n}\n","import React, { useState } from 'react'\nimport {AddCategory} from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n        // setCategories( ['HunterXHunter', ...categories] );   //Una forma de hacerlo\n        // setCategories( cats => [...cats, 'HunterXHunter'] );\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories= { setCategories }/>\n\n            <hr />\n\n            <ol>\n                { \n                    categories.map( category => (\n                         <GifGrid \n                            key={category}\n                            category={category} />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// GifExpertApp\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}